// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: FileTransfer.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileService_Download_FullMethodName = "/client.FileService/Download"
	FileService_Upload_FullMethodName   = "/client.FileService/Upload"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	Download(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (FileService_DownloadClient, error)
	// rpc DownloadFromEdge(EdgeFileDownloadRequest) returns (stream EdgeFileChunk);
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Download(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (FileService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], FileService_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadClient{stream}
	return x, nil
}

type FileService_UploadClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type fileServiceUploadClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	Download(*FileDownloadRequest, FileService_DownloadServer) error
	// rpc DownloadFromEdge(EdgeFileDownloadRequest) returns (stream EdgeFileChunk);
	Upload(FileService_UploadServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) Download(*FileDownloadRequest, FileService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServiceServer) Upload(FileService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).Download(m, &fileServiceDownloadServer{stream})
}

type FileService_DownloadServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).Upload(&fileServiceUploadServer{stream})
}

type FileService_UploadServer interface {
	SendAndClose(*Response) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileServiceUploadServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _FileService_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _FileService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "FileTransfer.proto",
}

const (
	EdgeFileService_DownloadFromEdge_FullMethodName = "/client.EdgeFileService/DownloadFromEdge"
)

// EdgeFileServiceClient is the client API for EdgeFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeFileServiceClient interface {
	DownloadFromEdge(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (EdgeFileService_DownloadFromEdgeClient, error)
}

type edgeFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeFileServiceClient(cc grpc.ClientConnInterface) EdgeFileServiceClient {
	return &edgeFileServiceClient{cc}
}

func (c *edgeFileServiceClient) DownloadFromEdge(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (EdgeFileService_DownloadFromEdgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EdgeFileService_ServiceDesc.Streams[0], EdgeFileService_DownloadFromEdge_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeFileServiceDownloadFromEdgeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EdgeFileService_DownloadFromEdgeClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type edgeFileServiceDownloadFromEdgeClient struct {
	grpc.ClientStream
}

func (x *edgeFileServiceDownloadFromEdgeClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeFileServiceServer is the server API for EdgeFileService service.
// All implementations must embed UnimplementedEdgeFileServiceServer
// for forward compatibility
type EdgeFileServiceServer interface {
	DownloadFromEdge(*FileDownloadRequest, EdgeFileService_DownloadFromEdgeServer) error
	mustEmbedUnimplementedEdgeFileServiceServer()
}

// UnimplementedEdgeFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeFileServiceServer struct {
}

func (UnimplementedEdgeFileServiceServer) DownloadFromEdge(*FileDownloadRequest, EdgeFileService_DownloadFromEdgeServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFromEdge not implemented")
}
func (UnimplementedEdgeFileServiceServer) mustEmbedUnimplementedEdgeFileServiceServer() {}

// UnsafeEdgeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeFileServiceServer will
// result in compilation errors.
type UnsafeEdgeFileServiceServer interface {
	mustEmbedUnimplementedEdgeFileServiceServer()
}

func RegisterEdgeFileServiceServer(s grpc.ServiceRegistrar, srv EdgeFileServiceServer) {
	s.RegisterService(&EdgeFileService_ServiceDesc, srv)
}

func _EdgeFileService_DownloadFromEdge_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeFileServiceServer).DownloadFromEdge(m, &edgeFileServiceDownloadFromEdgeServer{stream})
}

type EdgeFileService_DownloadFromEdgeServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type edgeFileServiceDownloadFromEdgeServer struct {
	grpc.ServerStream
}

func (x *edgeFileServiceDownloadFromEdgeServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// EdgeFileService_ServiceDesc is the grpc.ServiceDesc for EdgeFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.EdgeFileService",
	HandlerType: (*EdgeFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFromEdge",
			Handler:       _EdgeFileService_DownloadFromEdge_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "FileTransfer.proto",
}
