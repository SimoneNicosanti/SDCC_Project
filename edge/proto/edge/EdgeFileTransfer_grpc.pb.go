// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: EdgeFileTransfer.proto

package edge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EdgeFileService_DownloadFromEdge_FullMethodName = "/edge.EdgeFileService/DownloadFromEdge"
)

// EdgeFileServiceClient is the client API for EdgeFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeFileServiceClient interface {
	DownloadFromEdge(ctx context.Context, in *EdgeFileDownloadRequest, opts ...grpc.CallOption) (EdgeFileService_DownloadFromEdgeClient, error)
}

type edgeFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeFileServiceClient(cc grpc.ClientConnInterface) EdgeFileServiceClient {
	return &edgeFileServiceClient{cc}
}

func (c *edgeFileServiceClient) DownloadFromEdge(ctx context.Context, in *EdgeFileDownloadRequest, opts ...grpc.CallOption) (EdgeFileService_DownloadFromEdgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EdgeFileService_ServiceDesc.Streams[0], EdgeFileService_DownloadFromEdge_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeFileServiceDownloadFromEdgeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EdgeFileService_DownloadFromEdgeClient interface {
	Recv() (*EdgeFileChunk, error)
	grpc.ClientStream
}

type edgeFileServiceDownloadFromEdgeClient struct {
	grpc.ClientStream
}

func (x *edgeFileServiceDownloadFromEdgeClient) Recv() (*EdgeFileChunk, error) {
	m := new(EdgeFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeFileServiceServer is the server API for EdgeFileService service.
// All implementations must embed UnimplementedEdgeFileServiceServer
// for forward compatibility
type EdgeFileServiceServer interface {
	DownloadFromEdge(*EdgeFileDownloadRequest, EdgeFileService_DownloadFromEdgeServer) error
	mustEmbedUnimplementedEdgeFileServiceServer()
}

// UnimplementedEdgeFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeFileServiceServer struct {
}

func (UnimplementedEdgeFileServiceServer) DownloadFromEdge(*EdgeFileDownloadRequest, EdgeFileService_DownloadFromEdgeServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFromEdge not implemented")
}
func (UnimplementedEdgeFileServiceServer) mustEmbedUnimplementedEdgeFileServiceServer() {}

// UnsafeEdgeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeFileServiceServer will
// result in compilation errors.
type UnsafeEdgeFileServiceServer interface {
	mustEmbedUnimplementedEdgeFileServiceServer()
}

func RegisterEdgeFileServiceServer(s grpc.ServiceRegistrar, srv EdgeFileServiceServer) {
	s.RegisterService(&EdgeFileService_ServiceDesc, srv)
}

func _EdgeFileService_DownloadFromEdge_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgeFileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EdgeFileServiceServer).DownloadFromEdge(m, &edgeFileServiceDownloadFromEdgeServer{stream})
}

type EdgeFileService_DownloadFromEdgeServer interface {
	Send(*EdgeFileChunk) error
	grpc.ServerStream
}

type edgeFileServiceDownloadFromEdgeServer struct {
	grpc.ServerStream
}

func (x *edgeFileServiceDownloadFromEdgeServer) Send(m *EdgeFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// EdgeFileService_ServiceDesc is the grpc.ServiceDesc for EdgeFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edge.EdgeFileService",
	HandlerType: (*EdgeFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFromEdge",
			Handler:       _EdgeFileService_DownloadFromEdge_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "EdgeFileTransfer.proto",
}
