// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: LoadBalancer.proto

package load_balancer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BalancingService_GetEdge_FullMethodName   = "/load_balancer.BalancingService/GetEdge"
	BalancingService_LogClient_FullMethodName = "/load_balancer.BalancingService/LogClient"
)

// BalancingServiceClient is the client API for BalancingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalancingServiceClient interface {
	GetEdge(ctx context.Context, in *User, opts ...grpc.CallOption) (*BalancerResponse, error)
	LogClient(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResponse, error)
}

type balancingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalancingServiceClient(cc grpc.ClientConnInterface) BalancingServiceClient {
	return &balancingServiceClient{cc}
}

func (c *balancingServiceClient) GetEdge(ctx context.Context, in *User, opts ...grpc.CallOption) (*BalancerResponse, error) {
	out := new(BalancerResponse)
	err := c.cc.Invoke(ctx, BalancingService_GetEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balancingServiceClient) LogClient(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, BalancingService_LogClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalancingServiceServer is the server API for BalancingService service.
// All implementations must embed UnimplementedBalancingServiceServer
// for forward compatibility
type BalancingServiceServer interface {
	GetEdge(context.Context, *User) (*BalancerResponse, error)
	LogClient(context.Context, *User) (*LoginResponse, error)
	mustEmbedUnimplementedBalancingServiceServer()
}

// UnimplementedBalancingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBalancingServiceServer struct {
}

func (UnimplementedBalancingServiceServer) GetEdge(context.Context, *User) (*BalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdge not implemented")
}
func (UnimplementedBalancingServiceServer) LogClient(context.Context, *User) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogClient not implemented")
}
func (UnimplementedBalancingServiceServer) mustEmbedUnimplementedBalancingServiceServer() {}

// UnsafeBalancingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalancingServiceServer will
// result in compilation errors.
type UnsafeBalancingServiceServer interface {
	mustEmbedUnimplementedBalancingServiceServer()
}

func RegisterBalancingServiceServer(s grpc.ServiceRegistrar, srv BalancingServiceServer) {
	s.RegisterService(&BalancingService_ServiceDesc, srv)
}

func _BalancingService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancingServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalancingService_GetEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancingServiceServer).GetEdge(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalancingService_LogClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalancingServiceServer).LogClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BalancingService_LogClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalancingServiceServer).LogClient(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// BalancingService_ServiceDesc is the grpc.ServiceDesc for BalancingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalancingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "load_balancer.BalancingService",
	HandlerType: (*BalancingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEdge",
			Handler:    _BalancingService_GetEdge_Handler,
		},
		{
			MethodName: "LogClient",
			Handler:    _BalancingService_LogClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LoadBalancer.proto",
}
