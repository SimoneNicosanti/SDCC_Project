# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from file_transfer import File_pb2 as file__transfer_dot_File__pb2


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upload = channel.unary_stream(
                '/client.FileService/Upload',
                request_serializer=file__transfer_dot_File__pb2.FileUploadRequest.SerializeToString,
                response_deserializer=file__transfer_dot_File__pb2.FileChunk.FromString,
                )
        self.Download = channel.stream_unary(
                '/client.FileService/Download',
                request_serializer=file__transfer_dot_File__pb2.FileChunk.SerializeToString,
                response_deserializer=file__transfer_dot_File__pb2.Response.FromString,
                )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Upload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request_iterator, context):
        """rpc Delete(FileDeleteRequest) returns (FileDeleteResponse)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upload': grpc.unary_stream_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=file__transfer_dot_File__pb2.FileUploadRequest.FromString,
                    response_serializer=file__transfer_dot_File__pb2.FileChunk.SerializeToString,
            ),
            'Download': grpc.stream_unary_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=file__transfer_dot_File__pb2.FileChunk.FromString,
                    response_serializer=file__transfer_dot_File__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'client.FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/client.FileService/Upload',
            file__transfer_dot_File__pb2.FileUploadRequest.SerializeToString,
            file__transfer_dot_File__pb2.FileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Download(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/client.FileService/Download',
            file__transfer_dot_File__pb2.FileChunk.SerializeToString,
            file__transfer_dot_File__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
