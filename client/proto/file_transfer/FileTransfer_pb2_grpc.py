# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from file_transfer import FileTransfer_pb2 as file__transfer_dot_FileTransfer__pb2


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Download = channel.unary_stream(
                '/file_transfer.FileService/Download',
                request_serializer=file__transfer_dot_FileTransfer__pb2.FileDownloadRequest.SerializeToString,
                response_deserializer=file__transfer_dot_FileTransfer__pb2.FileChunk.FromString,
                )
        self.Upload = channel.stream_unary(
                '/file_transfer.FileService/Upload',
                request_serializer=file__transfer_dot_FileTransfer__pb2.FileChunk.SerializeToString,
                response_deserializer=file__transfer_dot_FileTransfer__pb2.FileResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/file_transfer.FileService/Delete',
                request_serializer=file__transfer_dot_FileTransfer__pb2.FileDeleteRequest.SerializeToString,
                response_deserializer=file__transfer_dot_FileTransfer__pb2.FileResponse.FromString,
                )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Download': grpc.unary_stream_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=file__transfer_dot_FileTransfer__pb2.FileDownloadRequest.FromString,
                    response_serializer=file__transfer_dot_FileTransfer__pb2.FileChunk.SerializeToString,
            ),
            'Upload': grpc.stream_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=file__transfer_dot_FileTransfer__pb2.FileChunk.FromString,
                    response_serializer=file__transfer_dot_FileTransfer__pb2.FileResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=file__transfer_dot_FileTransfer__pb2.FileDeleteRequest.FromString,
                    response_serializer=file__transfer_dot_FileTransfer__pb2.FileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_transfer.FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/file_transfer.FileService/Download',
            file__transfer_dot_FileTransfer__pb2.FileDownloadRequest.SerializeToString,
            file__transfer_dot_FileTransfer__pb2.FileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/file_transfer.FileService/Upload',
            file__transfer_dot_FileTransfer__pb2.FileChunk.SerializeToString,
            file__transfer_dot_FileTransfer__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_transfer.FileService/Delete',
            file__transfer_dot_FileTransfer__pb2.FileDeleteRequest.SerializeToString,
            file__transfer_dot_FileTransfer__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EdgeFileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DownloadFromEdge = channel.unary_stream(
                '/file_transfer.EdgeFileService/DownloadFromEdge',
                request_serializer=file__transfer_dot_FileTransfer__pb2.FileDownloadRequest.SerializeToString,
                response_deserializer=file__transfer_dot_FileTransfer__pb2.FileChunk.FromString,
                )


class EdgeFileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DownloadFromEdge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EdgeFileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DownloadFromEdge': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFromEdge,
                    request_deserializer=file__transfer_dot_FileTransfer__pb2.FileDownloadRequest.FromString,
                    response_serializer=file__transfer_dot_FileTransfer__pb2.FileChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_transfer.EdgeFileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EdgeFileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DownloadFromEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/file_transfer.EdgeFileService/DownloadFromEdge',
            file__transfer_dot_FileTransfer__pb2.FileDownloadRequest.SerializeToString,
            file__transfer_dot_FileTransfer__pb2.FileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
